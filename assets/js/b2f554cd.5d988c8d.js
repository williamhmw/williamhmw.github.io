"use strict";(self.webpackChunkwilliamhmw_github_io=self.webpackChunkwilliamhmw_github_io||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"app-gocal-criando-um-app-parte-1","metadata":{"permalink":"/blog/app-gocal-criando-um-app-parte-1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-29-app-gocal-criando-um-app-parte-1.md","source":"@site/blog/2022-06-29-app-gocal-criando-um-app-parte-1.md","title":"App goCal - Criando um App - Parte 1","description":"Um guia com o passo a passo de como criar uma aplica\xe7\xe3o em React Native, explicando a l\xf3gica das fun\xe7\xf5es, arquivos e decis\xf5es.","date":"2022-06-29T00:00:00.000Z","formattedDate":"June 29, 2022","tags":[{"label":"mobile","permalink":"/blog/tags/mobile"},{"label":"react native","permalink":"/blog/tags/react-native"},{"label":"aplica\xe7\xe3o","permalink":"/blog/tags/aplicacao"},{"label":"app","permalink":"/blog/tags/app"}],"readingTime":3.76,"truncated":true,"authors":[{"name":"William Honorio","title":"Desenvolvedor em aprendizado","url":"https://github.com/williamhmw","imageURL":"https://raw.githubusercontent.com/williamhmw/williamhmw.github.io/main/blog/william.jpg","key":"william"}],"frontMatter":{"slug":"app-gocal-criando-um-app-parte-1","title":"App goCal - Criando um App - Parte 1","authors":"william","tags":["mobile","react native","aplica\xe7\xe3o","app"]},"nextItem":{"title":"App goCal - Inserindo navega\xe7\xe3o - Parte 2","permalink":"/blog/app-gocal-inserindo-navegacao-parte-2"}},"content":"> Um guia com o passo a passo de como criar uma aplica\xe7\xe3o em React Native, explicando a l\xf3gica das fun\xe7\xf5es, arquivos e decis\xf5es.\\r\\n\\r\\n> Esse guia \xe9 um resumo do que entendi e aprendi durante um curso para que eu possa aplicar os conceitos em outros projetos.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n### Iniciando um novo projeto em React Native  \\r\\n\\r\\nNo VS Code abrimos um novo terminal e iniciamos com o comando abaixo.\\r\\n\\r\\n```bash title=\\"Criar novo projeto\\"\\r\\nnpx react-native init AppGoCal\\r\\n```\\r\\n\\r\\nDepois de executar o comando ser\xe1 feito o download do template do React Native e criado a pasta do projeto com o nome AppGoCal\\r\\n\\r\\nPara iniciar o projeto e verificar como o App est\xe1 execute o comando abaixo:\\r\\n\\r\\n```bash title=\\"Iniciar emulador Metro\\"\\r\\nnpx react-native start\\r\\n```\\r\\n\\r\\nIsso ir\xe1 executar o `Metro`, compilador respons\xe1vel por gerar os c\xf3digos em Javascript para o emulador, na sequ\xeancia abra um novo terminal e execute o comando abaixo para iniciar o emulador.\\r\\n\\r\\n```bash title=\\"Iniciar emulador android\\"\\r\\nnpx react-native run-android\\r\\n```\\r\\n\\r\\n### Limpando os arquivos\\r\\n\\r\\nPara iniciar a contru\xe7\xe3o do aplicativo vamos deletar e modificar alguns arquivos que vem no template padr\xe3o do React Native quando criamos o projeto.\\r\\n\\r\\nPara come\xe7ar vamos criar uma pasta na raiz do projeto chamada `src`, dentro dela criaremos duas pastas, a `pages` e `components`. Essas modifica\xe7\xf5es s\xe3o feitas por quest\xf5es de organiza\xe7\xe3o.\\r\\n\\r\\nPodemos apagar o arquivo `.eslintrc.js` e `.prettierrc.js`, no momento n\xe3o vamos utiliz\xe1-los.\\r\\n\\r\\nNo arquivo `App.js` vamos apagar todo o c\xf3digo inicial e colocar o c\xf3digo abaixo.\\r\\n\\r\\n```js showLineNumbers title=\\"@/App.js\\"\\r\\nimport React from \'react\';\\r\\nimport { StatusBar } from \'react-native\';\\r\\n\\r\\nimport { Home } from \'./src/pages/Home\';\\r\\n\\r\\nexport default function App() {\\r\\n  return (\\r\\n    <>\\r\\n      <StatusBar \\r\\n        barStyle=\\"light-content\\" \\r\\n        translucent \\r\\n        backgroundColor=\\"transparent\\" \\r\\n      />\\r\\n      <Home />\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n```\\r\\nO `StatusBar` \xe9 um componente utilziado para controla a barra de status do iOS e Android, onde \xe9 exibido, a hora, notifica\xe7\xf5es, baterias, etc.\\r\\n\\r\\nDessa forma estamos passando um estilo \\"claro\\" e o background da barra de status como transparente.\\r\\n\\r\\nDepois vamos criar um novo arquivo em `src/pages` chamado `Home.js`, \xe9 ele que \xe9 refenciado no c\xf3digo acima como `{ Home }`, ele ser\xe1 respons\xe1vel pela p\xe1gina inicial do App.\\r\\n\\r\\nNele colocaremos o seguinte c\xf3digo\\r\\n\\r\\n\\r\\n```js showLineNumbers title=\\"./src/pages/Home.js\\"\\r\\nimport React from \'react\';\\r\\nimport { View, Text } from \'react-native\';\\r\\n\\r\\nexport function Home() {\\r\\n  return (\\r\\n    <View>\\r\\n        <Text>\\r\\n        // highlight-next-line\\r\\n                Welcome in App for calculate calories, William!\\r\\n        </Text>\\r\\n    </View>\\r\\n  )\\r\\n};\\r\\n```\\r\\nNa tela dever\xe1 aparecer o texto Welcome in App for calculate calories, William!.\\r\\n\\r\\n### Come\xe7ando a estilizar o App\\r\\n\\r\\nPara come\xe7ar a estilizar o App vamos utilizar o componente `StyleSheet`.\\r\\n\\r\\nPrimeiro vamos criar uma vari\xe1vel respons\xe1vel pelos estilos chamado `styles` e passar algumas informa\xe7\xf5es envolvendo em um container.\\r\\n\\r\\n```js showLineNumbers title=\\"./src/pages/Home.js\\"\\r\\nconst styles = StyleSheet.create({\\r\\n    container:{\\r\\n        flex: 1,\\r\\n        backgroundColor: \'#DCDCE5\',\\r\\n        paddingVertical:70,\\r\\n        paddingHorizontal:30,\\r\\n    }\\r\\n    \\r\\n})\\r\\n```\\r\\n\\r\\nDepois vamos passar esse estilo para a View principal.\\r\\n\\r\\n```js showLineNumbers title=\\"./src/pages/Home.js\\"\\r\\nimport React from \'react\';\\r\\nimport { View, Text } from \'react-native\';\\r\\n\\r\\n\\r\\nexport function Home() {\\r\\n  return (\\r\\n    // highlight-next-line\\r\\n     <View style={styles.container}>\\r\\n        <Text>\\r\\n                Para come\xe7ar como podemos te chamar?\\r\\n        </Text>\\r\\n    </View>\\r\\n  )\\r\\n};\\r\\n```\\r\\n\\r\\nNos componentes que desejamos passar um estilo, basta colocar no formato do c\xf3digo abaixo.\\r\\n\\r\\n```js showLineNumbers title=\\"./src/pages/Home.js\\"\\r\\n     <View style={styles.nomedoobjeto}>\\r\\n        <Text style={styles.nomedoobjeto2}>\\r\\n                Exemplo\\r\\n        </Text>\\r\\n    </View>\\r\\n```\\r\\n### Adicionando TextInput\\r\\n\\r\\nVamos acresentar o TextInput na aplica\xe7\xe3o e depois fazer as estiliza\xe7\xf5es por \xfaltimo.\\r\\n\\r\\n```js title=\\"./src/pages/Home.js\\"\\r\\nimport { StyleSheet, View, Text, TextInput } from \'react-native\';\\r\\n```\\r\\n\\r\\nQuando for acrescentado um componente core do React Native \xe9 necess\xe1rio fazer a importa\xe7\xe3o como no c\xf3digo acima.\\r\\n\\r\\nDepois vamos adicionar o campo do TextInput e passar algumas propriedades para ele.\\r\\n\\r\\n```js showLineNumbers title=\\"./src/pages/Home.js\\"\\r\\nexport function Home() {\\r\\n  return (\\r\\n    <View style={styles.container}>\\r\\n        <Text style={styles.title}>\\r\\n                Para come\xe7ar como podemos te chamar?\\r\\n        </Text>\\r\\n        <TextInput\\r\\n            style={styles.input}\\r\\n            placeholder=\\"Digite o seu nome\\"\\r\\n        />\\r\\n    </View>\\r\\n  )\\r\\n};\\r\\n```\\r\\n\\r\\n### Adicionando TouchableOpacity\\r\\n\\r\\nPara adicionar o TouchableOpacity vamos acrescentar a importa\xe7\xe3o no \xednicio do c\xf3digo e colocar dentro da View principal.\\r\\n\\r\\n```js showLineNumbers title=\\"./src/pages/Home.js\\"\\r\\n<View style={styles.container}>\\r\\n        <Text style={styles.title}>\\r\\n                Para come\xe7ar como podemos te chamar?\\r\\n        </Text>\\r\\n        <TextInput\\r\\n            style={styles.input}\\r\\n            placeholder=\\"Digite o seu nome\\"\\r\\n        />\\r\\n        <TouchableOpacity style={styles.buttonAvancar}>\\r\\n            <Text style={styles.buttonsText}>Avan\xe7ar</Text>\\r\\n        </TouchableOpacity>\\r\\n    </View>\\r\\n```\\r\\n\\r\\n### Estilizando Input e Button\\r\\n\\r\\nPara finalizar essa etapa vamos estilzar com o seguinte c\xf3digo:\\r\\n\\r\\n```js showLineNumbers title=\\"./src/pages/Home.js\\"\\r\\nconst styles = StyleSheet.create({\\r\\n    container:{\\r\\n        flex: 1,\\r\\n        backgroundColor: \'#DCDCE5\',\\r\\n        paddingVertical:70,\\r\\n        paddingHorizontal:20,\\r\\n    },\\r\\n    title:{\\r\\n        fontFamily: \'Poppins\',\\r\\n        fontSize: 18,\\r\\n        color: \'#2C2C2C\',\\r\\n        fontWeight: \'bold\',\\r\\n    },\\r\\n    input:{\\r\\n        fontFamily: \'Poppins\',\\r\\n        fontSize: 14,\\r\\n        color: \'#969CB3\',\\r\\n        backgroundColor: \'white\',\\r\\n        paddingHorizontal:20,\\r\\n        paddingVertical:18,\\r\\n        height: 56,\\r\\n        borderRadius: 8,\\r\\n        marginTop: 20,\\r\\n        marginBottom: 10\\r\\n    },\\r\\n    buttonAvancar:{\\r\\n        alignItems: \'center\',\\r\\n        borderRadius: 5,\\r\\n        backgroundColor: \'#37B874\',\\r\\n        paddingVertical: 18\\r\\n    },\\r\\n    buttonsText:{\\r\\n        fontFamily: \'Poppins\',\\r\\n        fontSize: 14,\\r\\n        color: \'white\',\\r\\n        fontWeight: \'bold\'\\r\\n    }\\r\\n})\\r\\n```"},{"id":"app-gocal-inserindo-navegacao-parte-2","metadata":{"permalink":"/blog/app-gocal-inserindo-navegacao-parte-2","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-29-app-gocal-inserindo-navegacao-parte-2.md","source":"@site/blog/2022-06-29-app-gocal-inserindo-navegacao-parte-2.md","title":"App goCal - Inserindo navega\xe7\xe3o - Parte 2","description":"Para navegar entre telas precisamos inserir uma nova biblioteca na aplica\xe7\xe3o.","date":"2022-06-29T00:00:00.000Z","formattedDate":"June 29, 2022","tags":[{"label":"mobile","permalink":"/blog/tags/mobile"},{"label":"react native","permalink":"/blog/tags/react-native"},{"label":"aplica\xe7\xe3o","permalink":"/blog/tags/aplicacao"},{"label":"app","permalink":"/blog/tags/app"},{"label":"react navegation","permalink":"/blog/tags/react-navegation"}],"readingTime":2.745,"truncated":true,"authors":[{"name":"William Honorio","title":"Desenvolvedor em aprendizado","url":"https://github.com/williamhmw","imageURL":"https://raw.githubusercontent.com/williamhmw/williamhmw.github.io/main/blog/william.jpg","key":"william"}],"frontMatter":{"slug":"app-gocal-inserindo-navegacao-parte-2","title":"App goCal - Inserindo navega\xe7\xe3o - Parte 2","authors":"william","tags":["mobile","react native","aplica\xe7\xe3o","app","react navegation"]},"prevItem":{"title":"App goCal - Criando um App - Parte 1","permalink":"/blog/app-gocal-criando-um-app-parte-1"},"nextItem":{"title":"Passo a passo da aplica\xe7\xe3o To-Do","permalink":"/blog/passo-a-passo-todo"}},"content":"> Para navegar entre telas precisamos inserir uma nova biblioteca na aplica\xe7\xe3o.\\r\\n\\r\\n> Uma das mais utilizadas no mercado \xe9 o React Navegation, que possui uma \xf3tima documenta\xe7\xe3o e aplicabilidade\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n### Inserindo biblioteca na aplica\xe7\xe3o\\r\\n\\r\\nNo VS Code abrimos um novo terminal no projeto e iniciamos com o comando abaixo para instalar os pacotes necess\xe1rios.\\r\\n\\r\\n```bash title=\\"Instalar pacote\\"\\r\\nnpm install @react-navigation/native\\r\\n```\\r\\n\\r\\nEm seguida vamos instalar as depend\xeancias que vamos utilizar inicialmente.\\r\\n\\r\\n```bash title=\\"Instalar depend\xeancia\\"\\r\\nnpm install react-native-screens react-native-safe-area-context\\r\\n```\\r\\n\\r\\n### Organizando as rotas\\r\\n\\r\\nPrecisamos envolver toda a aplica\xe7\xe3o dentro do `NavigationContainer`, em um app isso \xe9 feito geralmente no index.js ou App.js, no nosso caso, por quest\xe3o de organiza\xe7\xe3o e adi\xe7\xe3o de futuras rotas, vamos separar em partes.\\r\\n\\r\\nPara organizar as rotas da navega\xe7\xe3o vamos criar uma nova pasta chamada `routes` dentro do `src`, dentro dela vamos criar o arquivo `stack.routes.js`, nela vamos organizar as rotas que s\xe3o utilizadas para navegar entre as telas.\\r\\n\\r\\nVamos colocar o seguinte c\xf3digo:\\r\\n\\r\\n```js showLineNumbers title=\\"./routes/stack.routes.js\\"\\r\\nimport React from \'react\';\\r\\nimport { createNativeStackNavigator} from \'@react-navigation/native-stack\';\\r\\n\\r\\nconst { Screen, Navigator } = createNativeStackNavigator();\\r\\n\\r\\nimport {Home} from \'../pages/Home\';\\r\\nimport {Data} from \'../pages/Data\';\\r\\n\\r\\nexport function StackRoutes(){\\r\\n    return(\\r\\n        <Navigator>\\r\\n            <Screen\\r\\n            name=\\"Home\\"\\r\\n            component={Home}\\r\\n            />\\r\\n            <Screen\\r\\n            name=\\"Data\\"\\r\\n            component={Data}\\r\\n            />\\r\\n        </Navigator>\\r\\n    )\\r\\n}\\r\\n```\\r\\n\\r\\nDessa forma, quando chamarmos a Screen `Home`, ela que vai ser renderizada, quando chamarmos a Screen `Data`, ela que ser\xe1 renderizada.\\r\\n\\r\\nAssim conseguimos organizar as rotas em um arquivo separado.\\r\\n\\r\\n### Envolvendo aplica\xe7\xe3o no  NavigationContainer\\r\\n\\r\\nVamos criar mais um arquivo chamado `index.js` na pasta `routes` e colocar o seguinte c\xf3digo:\\r\\n\\r\\n```js showLineNumbers title=\\"./routes/index.js\\"\\r\\nimport React from \\"react\\";\\r\\nimport { NavigationContainer } from \\"@react-navigation/native\\";\\r\\n\\r\\nimport { StackRoutes } from \\"./stack.routes\\";\\r\\n\\r\\nexport function Routes(){\\r\\n    return(\\r\\n        <NavigationContainer>\\r\\n            <StackRoutes/>\\r\\n        </NavigationContainer>\\r\\n    )\\r\\n}\\r\\n```\\r\\n\\r\\nAqui colocamos o `NavigationContainer`, respons\xe1vel por organizar toda a rota da aplica\xe7\xe3o, dentro dela chamamos o StackRoutes que criamos no arquivo `stack.routes.js`.\\r\\n\\r\\nDessa forma, se precisarmos adicionar novas rotas basta adicionar campos no `stack.routes.js` e se precisarmos separar diferentes rotas para diferentes situa\xe7\xf5s modificamos o `index.js`.\\r\\n\\r\\nNo `App.js` precisa ser adicionado o `<Routes/>` onde antes era o `Home`.\\r\\n\\r\\n```js showLineNumbers title=\\"@App.js\\"\\r\\nexport default function App() {\\r\\n  return (\\r\\n    <>\\r\\n      <StatusBar \\r\\n        barStyle=\\"light-content\\" \\r\\n        translucent \\r\\n        backgroundColor=\\"transparent\\" \\r\\n      />\\r\\n      // highlight-next-line\\r\\n      <Routes/>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n### Colocando navega\xe7\xe3o em um bot\xe3o\\r\\n\\r\\nQuando clicamos no `TouchableOpacity` \\"Avan\xe7ar\\" na nossa aplica\xe7\xe3o, precisamos que seja carregado a pr\xf3xima tela.\\r\\n\\r\\nPara isso vamos criar uma fun\xe7\xe3o em `Home.js`.\\r\\n\\r\\n```js showLineNumbers title=\\"./src/pages/Home.js\\"\\r\\nimport React from \'react\';\\r\\nimport { StyleSheet, View, Text, TextInput, TouchableOpacity} from \'react-native\';\\r\\n// highlight-next-line\\r\\nimport { useNavigation } from \'@react-navigation/native\';\\r\\n\\r\\n  // highlight-start\\r\\nexport function Home() {\\r\\n  const navigation = useNavigation()\\r\\n\\r\\n  function openData(){\\r\\n      navigation.navigate(\'Data\');\\r\\n  }\\r\\n  // highlight-end\\r\\n   return (\\r\\n    <View style={styles.container}>\\r\\n        <Text style={styles.title}>\\r\\n                Para come\xe7ar como podemos te chamar?\\r\\n        </Text>\\r\\n        <TextInput\\r\\n            style={styles.input}\\r\\n            placeholder=\\"Digite o seu nome\\"\\r\\n        />\\r\\n        <TouchableOpacity \\r\\n            style={styles.buttonAvancar}\\r\\n            // highlight-next-line\\r\\n            onPress={openData}\\r\\n        >\\r\\n            <Text style={styles.buttonsText}>Avan\xe7ar</Text>\\r\\n        </TouchableOpacity>\\r\\n    </View>\\r\\n  )\\r\\n};\\r\\n```\\r\\nNas linhas em destaque precisamos criar uma fun\xe7\xe3o que ser\xe1 chamada ao clicar no bot\xe3o, vamos dar o nome de `openData` a ela.\\r\\n\\r\\nNa fun\xe7\xe3o vamos utilizar o `useNavigation`, que \xe9 um recurso nativo de naevga\xe7\xe3o, precisamos fazer oimport dele o \xednicio do c\xf3digo.\\r\\n\\r\\nDepois vamos criar uma cont chamada `navigation` e passar a fun\xe7\xe3o nativa de navega\xe7\xe3o.\\r\\n\\r\\nNa fun\xe7\xe3o `openData` colocamos nossa constante e passamos o m\xe9todo `navigate`, em seguida colocamos o nome da nossa rota que colocamos no arquivo `stack.routes.js`."},{"id":"passo-a-passo-todo","metadata":{"permalink":"/blog/passo-a-passo-todo","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-19-passo-a-passo-todo.md","source":"@site/blog/2022-06-19-passo-a-passo-todo.md","title":"Passo a passo da aplica\xe7\xe3o To-Do","description":"Um guia com o passo a passo de uma aplica\xe7\xe3o To-Do em React Native, explicando a l\xf3gica das fun\xe7\xf5es, arquivos e decis\xf5es.","date":"2022-06-19T00:00:00.000Z","formattedDate":"June 19, 2022","tags":[{"label":"mobile","permalink":"/blog/tags/mobile"},{"label":"react native","permalink":"/blog/tags/react-native"},{"label":"JSX","permalink":"/blog/tags/jsx"},{"label":"state","permalink":"/blog/tags/state"},{"label":"props","permalink":"/blog/tags/props"},{"label":"to-do","permalink":"/blog/tags/to-do"},{"label":"aplica\xe7\xe3o","permalink":"/blog/tags/aplicacao"}],"readingTime":6.39,"truncated":true,"authors":[{"name":"William Honorio","title":"Desenvolvedor em aprendizado","url":"https://github.com/williamhmw","imageURL":"https://raw.githubusercontent.com/williamhmw/williamhmw.github.io/main/blog/william.jpg","key":"william"}],"frontMatter":{"slug":"passo-a-passo-todo","title":"Passo a passo da aplica\xe7\xe3o To-Do","authors":"william","tags":["mobile","react native","JSX","state","props","to-do","aplica\xe7\xe3o"]},"prevItem":{"title":"App goCal - Inserindo navega\xe7\xe3o - Parte 2","permalink":"/blog/app-gocal-inserindo-navegacao-parte-2"},"nextItem":{"title":"O b\xe1sico do React Native","permalink":"/blog/o-basico-do-react-native"}},"content":"> Um guia com o passo a passo de uma aplica\xe7\xe3o To-Do em React Native, explicando a l\xf3gica das fun\xe7\xf5es, arquivos e decis\xf5es.\\r\\n\\r\\n> Esse guia \xe9 um resumo do que entendi e aprendi durante um curso para que eu possa aplicar os conceitos em outros projetos.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n### Altera\xe7\xe3o de nome no header  \\r\\n\\r\\nDe acordo com a quantidade de tarefas que forem adicionadas ao TO-DO ser\xe1 necess\xe1rio alterar a palavra `tarefa` para  plural ou vice-versa.\\r\\n\\r\\n```tsx showLineNumbers title=\\"/src/components/Header.tsx\\"\\r\\nexport function Header({ tasksCounter }: HeaderProps) {\\r\\n  // highlight-next-line\\r\\n  const tasksCounterText = tasksCounter === 1 ? \'tarefa\' : \'tarefas\'\\r\\n  return (\\r\\n    <View style={styles.container}>\\r\\n      <Image source={logoImg} />\\r\\n      \\r\\n      <View style={styles.tasks}>\\r\\n        <Text style={styles.tasksCounter}>Voc\xea tem </Text>\\r\\n        { <Text style={styles.tasksCounterBold}>{tasksCounter} {tasksCounterText}</Text> }\\r\\n      </View>\\r\\n    </View>\\r\\n  )\\r\\n}\\r\\n```\\r\\nDeve ser criado a vari\xe1vel `taskCounterText` para passarmos o valor correto do texto que deve ser exibido, para declarar corretamente essa String, \xe9 feito um `if` diretamente na vari\xe1vel.\\r\\n\\r\\nNo exemplo \xe9 utilizado o operador condicional tern\xe1rio, que simplifica o `if` da seguinte forma:\\r\\n\\r\\n```js title=\\"Operador condicional tern\xe1rio\\"\\r\\ncondi\xe7\xe3o ? express\xe3o1 : express\xe3o1\\r\\n```\\r\\ntaskCounter \xe9 igual a 1?\\r\\nSe sim `taskCounterText` receber\xe1 o valor `\'tarefa\'`, sen\xe3o, receber\xe1 o valor `\'tarefas\'`.\\r\\n\\r\\nDessa fomra o resultado dessa verifica\xe7\xe3o ja \xe9 armazenado diretamente na vari\xe1vel, e declarada no campo `<Text>`\\r\\n\\r\\n### Adicionando altera\xe7\xf5es para o label `TextInput` \\r\\n\\r\\nQuando realizamos alguma a\xe7\xe3o no campo de texto podemos passar algumas a\xe7\xf5es, como por exemplo escrever algo no campo de texto, ou clicar no bot\xe3o de enviar, ou OK no teclado do device.\\r\\n\\r\\nNo exemplo abaixo s\xe3o tr\xeas campos que ser\xe3 adicionados informa\xe7\xf5es.\\r\\n\\r\\n```tsx showLineNumbers title=\\"/src/components/TodoInput.tsx\\"\\r\\nreturn (\\r\\n    <View style={styles.inputContainer}>\\r\\n      <TextInput \\r\\n        style={styles.input} \\r\\n        placeholder=\\"Adicionar novo todo...\\"\\r\\n        placeholderTextColor=\\"#B2B2B2\\"\\r\\n        returnKeyType=\\"send\\"\\r\\n        selectionColor=\\"#666666\\"\\r\\n        // highlight-star\\r\\n        value={task}\\r\\n        onChangeText={setTask}\\r\\n        onSubmitEditing = {handleAddNewTask}\\r\\n        // highlight-end\\r\\n      />\\r\\n      <TouchableOpacity\\r\\n        testID=\\"add-new-task-button\\"\\r\\n        activeOpacity={0.7}\\r\\n        style={styles.addButton}\\r\\n        onPress={handleAddNewTask}\\r\\n      >\\r\\n        <Icon name=\\"chevron-right\\" size={24} color=\\"#B2B2B2\\" />\\r\\n      </TouchableOpacity>\\r\\n    </View>\\r\\n  )\\r\\n```\\r\\nO campo `value={task}` recebe um valor, que pode ser alguma informa\xe7\xe3o ou vari\xe1vel, nesse caso estamos recebendo a informa\xe7\xe3o da vari\xe1vel `task`, isso quer dizer que o valor desse `<TextInput>` ser\xe1 a task que estamos inserindo.\\r\\n\\r\\nO campo `onChangeText={setTask}` recebe a v\xe1riavel `setTask`, que \xe9 utilizada para alterar o `estado` da vari\xe1vel `task`, isso \xe9 necess\xe1rio para manter a imutabilidade do `useState`. Ou seja, o `onChangeText` vai armazenar todo o texto que estiver sendo escrito na varial setTask, que depois ser\xe1 passada para a vari\xe1vel task, e posteriormente ser\xe1 o `value` do `TextInput`.\\r\\n\\r\\nO Campo `onSubmitEditing` \xe9 acionado quando o bot\xe3o de OK do teclado do device \xe9 pressionado, ou o bot\xe3o do `<TouchableOpacity>`. Esse evento deve chamar uma fun\xe7\xe3o que ser\xe1 acionada ao apertar o bot\xe3o, no caso da aplica\xe7\xe3o, dever\xe1 chamar a fun\xe7\xe3o `handleAddNewTask`, respons\xe1vel por adicionar uma nova Task.\\r\\n\\r\\n### Exibi\xe7\xe3o de alertas \\r\\n\\r\\nAo tentar adicionar um To-do com o mesmo nome, aparecer\xe1 um alerta no device informando que ja esta cadastrado.\\r\\n\\r\\n```tsx showLineNumbers title=\\"/src/pages/Home.tsx\\"\\r\\nfunction handleAddTask(newTaskTitle: string) {\\r\\n    // highlight-start\\r\\n    const taskWithSameTitle = tasks.find(task => task.title === newTaskTitle)\\r\\n\\r\\n    if(taskWithSameTitle){\\r\\n      return Alert.alert(\'Task j\xe1 cadastrada\', \'Voc\xea n\xe3o pode cadastrar uma task com o mesmo nome\')\\r\\n    }\\r\\n}\\r\\n    // highlight-end\\r\\n```\\r\\n\\r\\nNa fun\xe7\xe3o `handleAddTask` criamos uma vari\xe1vel para verificar se a tarefa possui o mesmo t\xedtulo, `taskWithSameTitle`, a variavel faz uma busca atrav\xe9s do m\xe9todo `find` do JS que funciona da seguinte maneira.\\r\\n\\r\\n```js title=\\"M\xe9todo find\\"\\r\\narray.find(function(currentValue, index, arr),thisValue)\\r\\n```\\r\\n\\r\\nFicando assim:\\r\\n\\r\\n```js showLineNumbers title=\\"M\xe9todo find tasks\\"\\r\\ntasks.find(task => task.title === newTaskTitle)\\r\\n```\\r\\nCriamos uma fun\xe7\xe3o arrow function(sem necessidade de ter um argumento), fazendo uma busca dentro do array `tasks`.\\r\\n\\r\\nFun\xe7\xe3o `task`, `task.title` === `newtaskTitle`, aqui verificamos se o task.title, que estamos tentando adcionar, \xe9 igual a newTaskTitle.\\r\\n\\r\\nDepois de criar essa variavel a passar o m\xe9todo `find` verificamos atrav\xe9s de um `if` a condi\xe7\xe3o que queremos.\\r\\n\\r\\n```js showLineNumbers title=\\"M\xe9todo find\\"\\r\\nif(taskWithSameTitle){\\r\\n      return Alert.alert(\'Task j\xe1 cadastrada\', \'Voc\xea n\xe3o pode cadastrar uma task com o mesmo nome\')\\r\\n    }\\r\\n```\\r\\n\\r\\nSe `taskWithSameTitle` atender a condi\xe7\xe3o que passamos na variavel, ent\xe3o ir\xe1 retornar um `Alert.alert`, o primeiro texto \xe9 o t\xedtulo do alerta (que \xe9 obrigat\xf3rio), e o segundo a mensagem que ser\xe1 exibida.\\r\\n\\r\\nO `return` \xe9 colocado para que depois que sexa exibido, continue a rodar as pr\xf3ximas etapas.\\r\\n\\r\\n### Alerta ao remover task\\r\\n\\r\\nQuando clicamos no \xedcone para remover uma task, ir\xe1 aparecer um `Alert` informando se tem certeza que deseja excluir.\\r\\n\\r\\nO Alert \xe9 composto pela seguinte express\xe3o:\\r\\n\\r\\n```js title=\\"Alert\\"\\r\\nAlert.alert(title, message?, buttons?, options?)\\r\\n```\\r\\nO primeiro \xe9 o t\xedtulo, o segundo \xe9 a mensagem que ser\xe1 mostrado, o terceiro os bot\xf5es, e o quarto as op\xe7\xf5es. Nesse exemplo estmoas indo at\xe9 o terceiro. Seguindo essa l\xf3gica, preenchemos da seguinte forma:\\r\\n\\r\\n```tsx showLineNumbers title=\\"/src/pages/Home.tsx\\"\\r\\nfunction handleRemoveTask(id: number) {\\r\\n    Alert.alert(\'Remover item\',\'Tem certeza que voc\xea deseja remover esse To-DO?\',[\\r\\n      {\\r\\n        style: \'cancel\',\\r\\n        text: \'N\xe3o\'\\r\\n      },\\r\\n      {\\r\\n        style: \'destructive\',\\r\\n        text: \'Sim\',\\r\\n        onPress: () => {\\r\\n          const updateTasks = tasks.filter(task => task.id !== id);\\r\\n\\r\\n          setTasks(updateTasks);\\r\\n        }\\r\\n      }\\r\\n    ])\\r\\n  }\\r\\n```\\r\\n\\r\\nNa fun\xe7\xe3o `handleRemoveTask` inserimos um `Alert.alert` e passamos alguns atributos, que s\xe3o o t\xedtulo, a mensagem e os bot\xf5es.\\r\\n\\r\\nO primeiro tem a propriedade `cancel` com o texto `N\xe3o`, o segundo tem a propriedade `destructive`, com o texto `Sim`, em seguida temos uma l\xf3gica.\\r\\n\\r\\nSe o bot\xe3o Sim for pressionado, ent\xe3o prosseguir\xe1 com a fun\xe7\xe3o que remove a Task.\\r\\n\\r\\n### Editando uma Task - parte 1\\r\\n\\r\\nSer\xe1 necess\xe1rio criar uma nova fun\xe7\xe3o, que ser\xe1 respons\xe1vel por editar a task.\\r\\n\\r\\nPrimeiro precisamso criar um `type`, passando algumas variaveis e tipando elas.\\r\\n\\r\\n```tsx showLineNumbers title=\\"/src/pages/Home.tsx\\"\\r\\ntype EditTaskArgs = {\\r\\n  taskId: number;\\r\\n  tassNewTitle: string;\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n```tsx showLineNumbers title=\\"/src/pages/Home.tsx\\"\\r\\n  function handleEditTask({taskId, taskNewTitle}: EditTaskArgs){\\r\\n    // highlight-start\\r\\n    const updatedTasks = tasks.map(task => ({...task}))\\r\\n\\r\\n    const taskToBeUpdate = updatedTasks.find(task => task.id === task.id);\\r\\n\\r\\n    if(!taskToBeUpdate)\\r\\n    return;\\r\\n\\r\\n    taskToBeUpdate.title = taskNewTitle;\\r\\n\\r\\n    setTasks(updatedTasks);\\r\\n    // highlight-end\\r\\n  }\\r\\n```\\r\\n// highlight-next-line\\r\\n\\r\\n  Primeiramente atuallizamos a vari\xe1vel `updateTasks` com o array onde est\xe3o as tasks, depois fazemos uma verifi\xe7\xe3o se ela n\xe3o existia, da apenas um `return` e nada acontece, caso a task exista, fazemos a altera\xe7\xe3o do nome e colocamos na vari\xe1vel `taskToBeUpdate`, em seguida tempos o `setTasks` que far\xe1 o update no nome.\\r\\n\\r\\n\\r\\n```tsx showLineNumbers title=\\"/src/pages/Home.tsx\\"\\r\\n  return (\\r\\n    <View style={styles.container}>\\r\\n      <Header tasksCounter={tasks.length} />\\r\\n\\r\\n      <TodoInput addTask={handleAddTask} />\\r\\n      // highlight-start\\r\\n      <TasksList \\r\\n        tasks={tasks} \\r\\n        toggleTaskDone={handleToggleTaskDone}\\r\\n        removeTask={handleRemoveTask} \\r\\n        editTask={handleEditTasks}\\r\\n      />\\r\\n      // highlight-end\\r\\n    </View>\\r\\n  )\\r\\n\\r\\n```\\r\\n\\r\\nNo `<TaskList>` precisamos inserir o `editTask` e passar a fun\xe7\xe3o respons\xe1vel pela edi\xe7\xe3o.\\r\\n\\r\\n### Editando uma Task - parte 2\\r\\n\\r\\nAgora precisamso refatorar alguams partes do c\xf3digo, come\xe7ando pelo arquivo `TaskList.tsx`\\r\\n\\r\\nCriaremos um novo arquivo com o nome `TaskItem.tsx` na pasta components para criar um componente com os itens que est\xe3o dentro o `<ItemWrapper>`\\r\\n\\r\\n```tsx showLineNumbers title=\\"/src/components/TaskList.tsx\\"\\r\\n<ItemWrapper index={index}>\\r\\n            \\r\\n          </ItemWrapper>\\r\\n```\\r\\n\\r\\nO novo arquivo ficara da forma abixo, copiando todas as informa\xe7\xe3oes a partir do `<View>`\\r\\n\\r\\n```tsx showLineNumbers title=\\"/src/components/TaskLItem.tsx\\"\\r\\nimport React from \'react\';\\r\\nimport { View } from \'react-native\';\\r\\n\\r\\nimport trashIcon from \'../assets/icons/trash/trash.png\'\\r\\n\\r\\nexport function TaskItem(){\\r\\n    return (\\r\\n        <View>\\r\\n        <View>\\r\\n              <TouchableOpacity\\r\\n                testID={`button-${index}`}\\r\\n                activeOpacity={0.7}\\r\\n                style={styles.taskButton}\\r\\n                onPress={() => toggleTaskDone(item.id)}\\r\\n                //TODO - use onPress (toggle task) prop\\r\\n              >\\r\\n                <View \\r\\n                  testID={`marker-${index}`}\\r\\n                  style={item.done ? styles.taskMarkerDone : styles.taskMarker}\\r\\n                >\\r\\n                  { item.done && (\\r\\n                    <Icon \\r\\n                      name=\\"check\\"\\r\\n                      size={12}\\r\\n                      color=\\"#FFF\\"\\r\\n                    />\\r\\n                  )}\\r\\n                </View>\\r\\n\\r\\n                <Text \\r\\n                  style={item.done ? styles.taskTextDone : styles.taskText}\\r\\n                >\\r\\n                  {item.title}\\r\\n                </Text>\\r\\n              </TouchableOpacity>\\r\\n            </View>\\r\\n\\r\\n            <TouchableOpacity\\r\\n              testID={`trash-${index}`}\\r\\n              style={{ paddingHorizontal: 24 }}\\r\\n              onPress={() => removeTask(item.id)}\\r\\n              //TODO - use onPress (remove task) prop\\r\\n            >\\r\\n              <Image source={trashIcon} />\\r\\n            </TouchableOpacity>\\r\\n        </View>\\r\\n    )\\r\\n}\\r\\n```\\r\\n\\r\\nOutra parte que deve ser transferida para o novo arquivo s\xe3o os estilos, respons\xe1vel pela customiza\xe7\xe3o da interface.\\r\\n\\r\\n```tsx showLineNumbers title=\\"/src/components/TaskItem.tsx\\"\\r\\nconst styles = StyleSheet.create({\\r\\n    taskButton: {\\r\\n      flex: 1,\\r\\n      paddingHorizontal: 24,\\r\\n      paddingVertical: 15,\\r\\n      marginBottom: 4,\\r\\n      borderRadius: 4,\\r\\n      flexDirection: \'row\',\\r\\n      alignItems: \'center\'\\r\\n    },\\r\\n    taskMarker: {\\r\\n      height: 16,\\r\\n      width: 16,\\r\\n      borderRadius: 4,\\r\\n      borderWidth: 1,\\r\\n      borderColor: \'#B2B2B2\',\\r\\n      marginRight: 15,\\r\\n      alignItems: \'center\',\\r\\n      justifyContent: \'center\'\\r\\n    },\\r\\n    taskText: {\\r\\n      color: \'#666\',\\r\\n      fontFamily: \'Inter-Medium\'\\r\\n    },\\r\\n    taskMarkerDone: {\\r\\n      height: 16,\\r\\n      width: 16,\\r\\n      borderRadius: 4,\\r\\n      backgroundColor: \'#1DB863\',\\r\\n      marginRight: 15,\\r\\n      alignItems: \'center\',\\r\\n      justifyContent: \'center\'\\r\\n    },\\r\\n    taskTextDone: {\\r\\n      color: \'#1DB863\',\\r\\n      textDecorationLine: \'line-through\',\\r\\n      fontFamily: \'Inter-Medium\'\\r\\n    }\\r\\n  })\\r\\n```"},{"id":"o-basico-do-react-native","metadata":{"permalink":"/blog/o-basico-do-react-native","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-17-o-basico.md","source":"@site/blog/2022-06-17-o-basico.md","title":"O b\xe1sico do React Native","description":"Aqui vai um resumo sobre os recursos b\xe1sicos de como funciona uma aplica\xe7\xe3o no React Native.","date":"2022-06-17T00:00:00.000Z","formattedDate":"June 17, 2022","tags":[{"label":"mobile","permalink":"/blog/tags/mobile"},{"label":"react native","permalink":"/blog/tags/react-native"},{"label":"JSX","permalink":"/blog/tags/jsx"},{"label":"state","permalink":"/blog/tags/state"},{"label":"props","permalink":"/blog/tags/props"}],"readingTime":2.44,"truncated":true,"authors":[{"name":"William Honorio","title":"Desenvolvedor em aprendizado","url":"https://github.com/williamhmw","imageURL":"https://raw.githubusercontent.com/williamhmw/williamhmw.github.io/main/blog/william.jpg","key":"william"}],"frontMatter":{"slug":"o-basico-do-react-native","title":"O b\xe1sico do React Native","authors":"william","tags":["mobile","react native","JSX","state","props"]},"prevItem":{"title":"Passo a passo da aplica\xe7\xe3o To-Do","permalink":"/blog/passo-a-passo-todo"},"nextItem":{"title":"Comandos em terminais","permalink":"/blog/comandos-em-terminais"}},"content":"Aqui vai um resumo sobre os recursos b\xe1sicos de como funciona uma aplica\xe7\xe3o no React Native.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nPrimeiramente fazemos a importa\xe7\xe3o do React para que seja poss\xedvel utilizar o JSX, depois importamos alguns componentes que s\xe3o do React native.\\r\\n\\r\\n```js showLineNumbers title=\\"Import\\"\\r\\nimport React from \'react\';\\r\\nimport { Text, View } from \'react-native\';\\r\\n```\\r\\n\\r\\nO c\xf3digo abaixo tem algumas l\xf3gcas para analisar.\\r\\n\\r\\n```js showLineNumbers title=\\"Hello world\\"\\r\\nconst HelloWorldApp = () => {\\r\\n  return (\\r\\n    // highlight-next-line\\r\\n    <View\\r\\n      style={{\\r\\n        flex: 1,\\r\\n        justifyContent: \\"center\\",\\r\\n        alignItems: \\"center\\"\\r\\n      }}>\\r\\n      // highlight-next-line\\r\\n      <Text>Hello, world!</Text>\\r\\n      // highlight-next-line\\r\\n    </View>\\r\\n  )\\r\\n}\\r\\nexport default HelloWorldApp;\\r\\n```\\r\\n\\r\\nO `<View>` e o `<Text>` s\xe3o componentes do React, sendo o `Text` para renderizar textos e o `View` para renderizar um cont\xeainer.\\r\\n\\r\\nNo c\xf3digo acima passamos um estilo para tudo que estiver dentro do componente `View`.\\r\\n\\r\\nO `HelloWorldApp` \xe9 um novo componente que criamos, dentrod e uma aplica\xe7\xe3o possu\xedmos deversos componentes.\\r\\n\\r\\n\\r\\nO pr\xf3ximo conceito s\xe3o os `Props`, que s\xe3o componentes criados por n\xf3s que podem ser utilizados em v\xe1rios locais diferentes no aplicativo, capaz de alterar alguns par\xe2metros dependendo de onde estiver.\\r\\n\\r\\n\\r\\n```js showLineNumbers title=\\"Hello props\\"\\r\\nimport React from \'react\';\\r\\nimport { Text, View, StyleSheet } from \'react-native\';\\r\\n// highlight-start\\r\\nconst styles = StyleSheet.create({\\r\\n  center: {\\r\\n    alignItems: \'center\'\\r\\n  }\\r\\n})\\r\\n// highlight-end\\r\\n\\r\\n// highlight-start\\r\\nconst Greeting = (qualquernome) => {\\r\\n  return (\\r\\n    <View style={styles.center}>\\r\\n      <Text>Hello {qualquernome.name}!</Text>\\r\\n    </View>\\r\\n  );\\r\\n}\\r\\n// highlight-end\\r\\n\\r\\n// highlight-start\\r\\nconst LotsOfGreetings = () => {\\r\\n  return (\\r\\n    <View style={[styles.center, {top: 50}]}>\\r\\n      <Greeting name=\'Rexxar\' />\\r\\n      <Greeting name=\'Jaina\' />\\r\\n      <Greeting name=\'Valeera\' />\\r\\n    </View>\\r\\n  );\\r\\n}\\r\\n\\r\\n// highlight-end\\r\\n// highlight-next-line\\r\\nexport default LotsOfGreetings;\\r\\n```\\r\\n\\r\\n1 - O c\xf3digo `const styles` cria uma vari\xe1vel de estilo que pode ser utilizada diversas vezes para v\xe1rios componentes, isso permite por exemplo clocar somente o tipo de fonte, cor, etc uma vez, depois quando se quer passar o mesmo atributo para outro componente basta passar a var\xedavel criada.\\r\\n\\r\\n2 - No c\xf3digo criamos a vari\xe1vel `Greeting` e passamos um nome para ela, no caso `qualquernome`.\\r\\nEm `<View>` colocamos o estilo j\xe1 parametrizado acima, em `<Text>` passamos o texto a ser renderiado e acresentamos dentro das chaves `{}` o nome do nosso props, no caso `qualquernome` e inserimos um `.` e colocamos qualquer outro nome a frente, no caso `name`.\\r\\nA vari\xe1vel que passamos precisa ser escrita no formato `{qualquernome.name}` funciona da seguinte forma, o primeiro \xe9 o nome passado para a fun\xe7\xe3o, e o segundo o nome do props.\\r\\n\\r\\n3 - Criamos outra vari\xe1vel na qual receberemos outros valores para o props, alterando assim os nomes.\\r\\nEm `<View>` colocamos o estilo j\xe1 parametrizado acima e acresentamos mais um estilo na pr\xf3rpia linha do view.\\r\\nLogo abaixo colocamos o nome da fun\xe7\xe3o acima, no caso `Greeting` e passamos para o props o nome que desejamos.\\r\\nQuando chamamos `<Greeting` estamos puxando a fun\xe7\xe3o logo acima e colocando ou valor para `name=`\\r\\n\\r\\n4 - Pra finalizar exportamos a fun\xe7\xe3o `LotsOfGreetings` para ela ser renderizada na tela."},{"id":"comandos-em-terminais","metadata":{"permalink":"/blog/comandos-em-terminais","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-16-comandos-em-terminais.md","source":"@site/blog/2022-06-16-comandos-em-terminais.md","title":"Comandos em terminais","description":"Para executar algumas a\xe7\xf5es no dia-a-dia precisamos executar alguns comandos atrav\xe9s de terminais. Abaixo uma listagem com os principais para quem esta estudando React Native.","date":"2022-06-16T00:00:00.000Z","formattedDate":"June 16, 2022","tags":[{"label":"comandos","permalink":"/blog/tags/comandos"},{"label":"mobile","permalink":"/blog/tags/mobile"},{"label":"react","permalink":"/blog/tags/react"},{"label":"terminal","permalink":"/blog/tags/terminal"},{"label":"powershell","permalink":"/blog/tags/powershell"}],"readingTime":0.975,"truncated":true,"authors":[{"name":"William Honorio","title":"Desenvolvedor em aprendizado","url":"https://github.com/williamhmw","imageURL":"https://raw.githubusercontent.com/williamhmw/williamhmw.github.io/main/blog/william.jpg","key":"william"}],"frontMatter":{"slug":"comandos-em-terminais","title":"Comandos em terminais","authors":"william","tags":["comandos","mobile","react","terminal","powershell"]},"prevItem":{"title":"O b\xe1sico do React Native","permalink":"/blog/o-basico-do-react-native"},"nextItem":{"title":"Primeiro post","permalink":"/blog/primeiro-post"}},"content":"Para executar algumas a\xe7\xf5es no dia-a-dia precisamos executar alguns comandos atrav\xe9s de terminais. Abaixo uma listagem com os principais para quem esta estudando React Native.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n:::info\\r\\n\\r\\nEsses comandos s\xe3o para executar um app em um emulador android, depois de seguir todo um processo de instala\xe7\xe3o e configura\xe7\xe3o.\\r\\n\\r\\n:::\\r\\n\\r\\nExecutar o `Metro` para emular o app no emulador:\\r\\n```git showLineNumbers title=\\"Iniciar Metro\\"\\r\\nnpm start\\r\\n```\\r\\n\\r\\nEm seguida executar o comando para iniciar o emulador do android:\\r\\n```git showLineNumbers title=\\"Iniciar Emulador Android\\"\\r\\nyarn android\\r\\n```\\r\\n\\r\\n\\r\\n:::info\\r\\n\\r\\nEsses comandos s\xe3o para executar o Docosaurus, plataforma de documena\xe7\xe3o e blog.\\r\\n\\r\\n:::\\r\\n\\r\\nExecutar o `Build` para gerar os arquivos est\xe1ticos que v\xe3o para o GitHub Pages\\r\\n```bash showLineNumbers title=\\"Iniciar build\\"\\r\\nnpm run build\\r\\n```\\r\\n\\r\\nExecutar o `Serve` para iniciar no servidor local localhost.\\r\\n```bash showLineNumbers title=\\"Iniciar servidor local\\"\\r\\nnpm run build\\r\\n```\\r\\n\\r\\nExecutar o `GIT_USER` para iniciar o deploy no GitHub Pages.\\r\\n```bash showLineNumbers title=\\"Iniciar deploy\\"\\r\\nGIT_USER=<GITHUB_USERNAME> yarn deploy\\r\\n```\\r\\n\\r\\nNo caso trocar o `<GITHUB_USERNAME>` pelo nome configurado no terminal.\\r\\n\\r\\nSe for executar pelo terminal do PowerShell deve ser inserido o c\xf3digo abaixo.\\r\\n\\r\\n```bash showLineNumbers title=\\"Iniciar deploy pelo Poweshell\\"\\r\\ncmd /C \'set \\"GIT_USER=<GITHUB_USERNAME>\\" && yarn deploy\'\\r\\n```\\r\\n\\r\\n\\r\\n**Bora codar!!!**"},{"id":"primeiro-post","metadata":{"permalink":"/blog/primeiro-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-15-first-post.md","source":"@site/blog/2022-06-15-first-post.md","title":"Primeiro post","description":"Criei esse blog para compartilhar meu aprendizado durante minha fase de estudos, inicialmente em react e mobile.","date":"2022-06-15T00:00:00.000Z","formattedDate":"June 15, 2022","tags":[{"label":"estudos","permalink":"/blog/tags/estudos"},{"label":"mobile","permalink":"/blog/tags/mobile"},{"label":"react","permalink":"/blog/tags/react"}],"readingTime":0.185,"truncated":true,"authors":[{"name":"William Honorio","title":"Desenvolvedor em aprendizado","url":"https://github.com/williamhmw","imageURL":"https://raw.githubusercontent.com/williamhmw/williamhmw.github.io/main/blog/william.jpg","key":"william"}],"frontMatter":{"slug":"primeiro-post","title":"Primeiro post","authors":"william","tags":["estudos","mobile","react"]},"prevItem":{"title":"Comandos em terminais","permalink":"/blog/comandos-em-terminais"}},"content":"Criei esse blog para compartilhar meu aprendizado durante minha fase de estudos, inicialmente em `react` e `mobile`.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nRegular blog authors can be added to `authors.yml`.\\r\\n\\r\\nOs dois princpais ilares ser\xe3o:\\r\\n\\r\\n- `Dicas`\\r\\n- `Resumos`\\r\\n\\r\\n**Bora codar!!!**"}]}')}}]);