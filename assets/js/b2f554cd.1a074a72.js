"use strict";(self.webpackChunkwilliamhmw_github_io=self.webpackChunkwilliamhmw_github_io||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"passo-a-passo-to-do","metadata":{"permalink":"/blog/passo-a-passo-to-do","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-19-passo-a-passo-todo.md","source":"@site/blog/2022-06-19-passo-a-passo-todo.md","title":"Passo a passo da aplica\xe7\xe3o To-Do","description":"Um guia com o passo a passo de uma aplica\xe7\xe3o To-Do em React Native, explicando a l\xf3gica das fun\xe7\xf5es, arquivos e decis\xf5es.","date":"2022-06-19T00:00:00.000Z","formattedDate":"June 19, 2022","tags":[{"label":"mobile","permalink":"/blog/tags/mobile"},{"label":"react native","permalink":"/blog/tags/react-native"},{"label":"JSX","permalink":"/blog/tags/jsx"},{"label":"state","permalink":"/blog/tags/state"},{"label":"props","permalink":"/blog/tags/props"},{"label":"to-do","permalink":"/blog/tags/to-do"},{"label":"aplica\xe7\xe3o","permalink":"/blog/tags/aplicacao"}],"readingTime":2.145,"truncated":true,"authors":[{"name":"William Honorio","title":"Desenvolvedor em aprendizado","url":"https://github.com/williamhmw","imageURL":"https://raw.githubusercontent.com/williamhmw/williamhmw.github.io/main/blog/william.jpg","key":"william"}],"frontMatter":{"slug":"passo-a-passo-to-do","title":"Passo a passo da aplica\xe7\xe3o To-Do","authors":"william","tags":["mobile","react native","JSX","state","props","to-do","aplica\xe7\xe3o"]},"nextItem":{"title":"O b\xe1sico do React Native","permalink":"/blog/o-basico-do-react-native"}},"content":"> Um guia com o passo a passo de uma aplica\xe7\xe3o To-Do em React Native, explicando a l\xf3gica das fun\xe7\xf5es, arquivos e decis\xf5es.\\r\\n\\r\\n> Esse guia \xe9 um resumo do que entendi e aprendi durante um curso para que eu possa aplicar os conceitos em outros projetos.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n### Altera\xe7\xe3o de nome no header  \\r\\n\\r\\nDe acordo com a quantidade de tarefas que forem adicionadas ao TO-DO ser\xe1 necess\xe1rio alterar a palavra `tarefa` para  plural ou vice-versa.\\r\\n\\r\\n```ts showLineNumbers title=\\"/src/components/Header.tsx\\"\\r\\nexport function Header({ tasksCounter }: HeaderProps) {\\r\\n  // highlight-next-line\\r\\n  const tasksCounterText = tasksCounter === 1 ? \'tarefa\' : \'tarefas\'\\r\\n  return (\\r\\n    <View style={styles.container}>\\r\\n      <Image source={logoImg} />\\r\\n      \\r\\n      <View style={styles.tasks}>\\r\\n        <Text style={styles.tasksCounter}>Voc\xea tem </Text>\\r\\n        { <Text style={styles.tasksCounterBold}>{tasksCounter} {tasksCounterText}</Text> }\\r\\n      </View>\\r\\n    </View>\\r\\n  )\\r\\n}\\r\\n```\\r\\nDeve ser criado a vari\xe1vel `taskCounterText` para passarmos o valor correto do texto que deve ser exibido, para declarar corretamente essa String, \xe9 feito um `if` diretamente na vari\xe1vel.\\r\\n\\r\\nNo exemplo \xe9 utilizado o operador condicional tern\xe1rio, que simplifica o `if` da seguinte forma:\\r\\n\\r\\n```js title=\\"Operador condicional tern\xe1rio\\"\\r\\ncondi\xe7\xe3o ? express\xe3o1 : express\xe3o1\\r\\n```\\r\\ntaskCounter \xe9 igual a 1?\\r\\nSe sim `taskCounterText` receber\xe1 o valor `\'tarefa\'`, sen\xe3o, receber\xe1 o valor `\'tarefas\'`.\\r\\n\\r\\nDessa fomra o resultado dessa verifica\xe7\xe3o ja \xe9 armazenado diretamente na vari\xe1vel, e declarada no campo `<Text>`\\r\\n\\r\\n### Exibi\xe7\xe3o de alertas \\r\\n\\r\\nAo tentar adicionar um To-do com o mesmo nome, aparecer\xe1 um alerta no device informando que ja esta cadastrado.\\r\\n\\r\\n```ts showLineNumbers title=\\"/src/pages/Home.tsx\\"\\r\\nfunction handleAddTask(newTaskTitle: string) {\\r\\n    // highlight-start\\r\\n    const taskWithSameTitle = tasks.find(task => task.title === newTaskTitle)\\r\\n\\r\\n    if(taskWithSameTitle){\\r\\n      return Alert.alert(\'Task j\xe1 cadastrada\', \'Voc\xea n\xe3o pode cadastrar uma task com o mesmo nome\')\\r\\n    }\\r\\n}\\r\\n    // highlight-end\\r\\n```\\r\\n\\r\\nNa fun\xe7\xe3o `handleAddTask` criamos uma vari\xe1vel para verificar se a tarefa possui o mesmo t\xedtulo, `taskWithSameTitle`, a variavel faz uma busca atrav\xe9s do m\xe9todo `find` do JS que funciona da seguinte maneira.\\r\\n\\r\\n```js title=\\"M\xe9todo find\\"\\r\\narray.find(function(currentValue, index, arr),thisValue)\\r\\n```\\r\\n\\r\\nFicando assim:\\r\\n\\r\\n```js showLineNumbers title=\\"M\xe9todo find tasks\\"\\r\\ntasks.find(task => task.title === newTaskTitle)\\r\\n```\\r\\nCriamos uma fun\xe7\xe3o arrow function(sem necessidade de ter um argumento), fazendo uma busca dentro do array `tasks`.\\r\\n\\r\\nFun\xe7\xe3o `task`, `task.title` === `newtaskTitle`, aqui verificamos se o task.title, que estamos tentando adcionar, \xe9 igual a newTaskTitle.\\r\\n\\r\\nDepois de cirar essa variavel a passar o m\xe9todo `find` verificamos atrav\xe9s de um `if` a condi\xe7\xe3o que queremos.\\r\\n\\r\\n```js showLineNumbers title=\\"M\xe9todo find\\"\\r\\nif(taskWithSameTitle){\\r\\n      return Alert.alert(\'Task j\xe1 cadastrada\', \'Voc\xea n\xe3o pode cadastrar uma task com o mesmo nome\')\\r\\n    }\\r\\n```\\r\\n\\r\\nSe `taskWithSameTitle` atender a condi\xe7\xe3o que passamos na variavel, ent\xe3o ir\xe1 retornar um `Alert.alert`, o primeiro texto \xe9 o t\xedtulo do alerta (que \xe9 obrigat\xf3rio), e o segundo a mensagem que ser\xe1 exibida."},{"id":"o-basico-do-react-native","metadata":{"permalink":"/blog/o-basico-do-react-native","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-17-o-basico.md","source":"@site/blog/2022-06-17-o-basico.md","title":"O b\xe1sico do React Native","description":"Aqui vai um resumo sobre os recursos b\xe1sicos de como funciona uma aplica\xe7\xe3o no React Native.","date":"2022-06-17T00:00:00.000Z","formattedDate":"June 17, 2022","tags":[{"label":"mobile","permalink":"/blog/tags/mobile"},{"label":"react native","permalink":"/blog/tags/react-native"},{"label":"JSX","permalink":"/blog/tags/jsx"},{"label":"state","permalink":"/blog/tags/state"},{"label":"props","permalink":"/blog/tags/props"}],"readingTime":2.44,"truncated":true,"authors":[{"name":"William Honorio","title":"Desenvolvedor em aprendizado","url":"https://github.com/williamhmw","imageURL":"https://raw.githubusercontent.com/williamhmw/williamhmw.github.io/main/blog/william.jpg","key":"william"}],"frontMatter":{"slug":"o-basico-do-react-native","title":"O b\xe1sico do React Native","authors":"william","tags":["mobile","react native","JSX","state","props"]},"prevItem":{"title":"Passo a passo da aplica\xe7\xe3o To-Do","permalink":"/blog/passo-a-passo-to-do"},"nextItem":{"title":"Comandos em terminais","permalink":"/blog/comandos-em-terminais"}},"content":"Aqui vai um resumo sobre os recursos b\xe1sicos de como funciona uma aplica\xe7\xe3o no React Native.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nPrimeiramente fazemos a importa\xe7\xe3o do React para que seja poss\xedvel utilizar o JSX, depois importamos alguns componentes que s\xe3o do React native.\\r\\n\\r\\n```js showLineNumbers title=\\"Import\\"\\r\\nimport React from \'react\';\\r\\nimport { Text, View } from \'react-native\';\\r\\n```\\r\\n\\r\\nO c\xf3digo abaixo tem algumas l\xf3gcas para analisar.\\r\\n\\r\\n```js showLineNumbers title=\\"Hello world\\"\\r\\nconst HelloWorldApp = () => {\\r\\n  return (\\r\\n    // highlight-next-line\\r\\n    <View\\r\\n      style={{\\r\\n        flex: 1,\\r\\n        justifyContent: \\"center\\",\\r\\n        alignItems: \\"center\\"\\r\\n      }}>\\r\\n      // highlight-next-line\\r\\n      <Text>Hello, world!</Text>\\r\\n      // highlight-next-line\\r\\n    </View>\\r\\n  )\\r\\n}\\r\\nexport default HelloWorldApp;\\r\\n```\\r\\n\\r\\nO `<View>` e o `<Text>` s\xe3o componentes do React, sendo o `Text` para renderizar textos e o `View` para renderizar um cont\xeainer.\\r\\n\\r\\nNo c\xf3digo acima passamos um estilo para tudo que estiver dentro do componente `View`.\\r\\n\\r\\nO `HelloWorldApp` \xe9 um novo componente que criamos, dentrod e uma aplica\xe7\xe3o possu\xedmos deversos componentes.\\r\\n\\r\\n\\r\\nO pr\xf3ximo conceito s\xe3o os `Props`, que s\xe3o componentes criados por n\xf3s que podem ser utilizados em v\xe1rios locais diferentes no aplicativo, capaz de alterar alguns par\xe2metros dependendo de onde estiver.\\r\\n\\r\\n\\r\\n```js showLineNumbers title=\\"Hello props\\"\\r\\nimport React from \'react\';\\r\\nimport { Text, View, StyleSheet } from \'react-native\';\\r\\n// highlight-start\\r\\nconst styles = StyleSheet.create({\\r\\n  center: {\\r\\n    alignItems: \'center\'\\r\\n  }\\r\\n})\\r\\n// highlight-end\\r\\n\\r\\n// highlight-start\\r\\nconst Greeting = (qualquernome) => {\\r\\n  return (\\r\\n    <View style={styles.center}>\\r\\n      <Text>Hello {qualquernome.name}!</Text>\\r\\n    </View>\\r\\n  );\\r\\n}\\r\\n// highlight-end\\r\\n\\r\\n// highlight-start\\r\\nconst LotsOfGreetings = () => {\\r\\n  return (\\r\\n    <View style={[styles.center, {top: 50}]}>\\r\\n      <Greeting name=\'Rexxar\' />\\r\\n      <Greeting name=\'Jaina\' />\\r\\n      <Greeting name=\'Valeera\' />\\r\\n    </View>\\r\\n  );\\r\\n}\\r\\n\\r\\n// highlight-end\\r\\n// highlight-next-line\\r\\nexport default LotsOfGreetings;\\r\\n```\\r\\n\\r\\n1 - O c\xf3digo `const styles` cria uma vari\xe1vel de estilo que pode ser utilizada diversas vezes para v\xe1rios componentes, isso permite por exemplo clocar somente o tipo de fonte, cor, etc uma vez, depois quando se quer passar o mesmo atributo para outro componente basta passar a var\xedavel criada.\\r\\n\\r\\n2 - No c\xf3digo criamos a vari\xe1vel `Greeting` e passamos um nome para ela, no caso `qualquernome`.\\r\\nEm `<View>` colocamos o estilo j\xe1 parametrizado acima, em `<Text>` passamos o texto a ser renderiado e acresentamos dentro das chaves `{}` o nome do nosso props, no caso `qualquernome` e inserimos um `.` e colocamos qualquer outro nome a frente, no caso `name`.\\r\\nA vari\xe1vel que passamos precisa ser escrita no formato `{qualquernome.name}` funciona da seguinte forma, o primeiro \xe9 o nome passado para a fun\xe7\xe3o, e o segundo o nome do props.\\r\\n\\r\\n3 - Criamos outra vari\xe1vel na qual receberemos outros valores para o props, alterando assim os nomes.\\r\\nEm `<View>` colocamos o estilo j\xe1 parametrizado acima e acresentamos mais um estilo na pr\xf3rpia linha do view.\\r\\nLogo abaixo colocamos o nome da fun\xe7\xe3o acima, no caso `Greeting` e passamos para o props o nome que desejamos.\\r\\nQuando chamamos `<Greeting` estamos puxando a fun\xe7\xe3o logo acima e colocando ou valor para `name=`\\r\\n\\r\\n4 - Pra finalizar exportamos a fun\xe7\xe3o `LotsOfGreetings` para ela ser renderizada na tela."},{"id":"comandos-em-terminais","metadata":{"permalink":"/blog/comandos-em-terminais","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-16-comandos-em-terminais.md","source":"@site/blog/2022-06-16-comandos-em-terminais.md","title":"Comandos em terminais","description":"Para executar algumas a\xe7\xf5es no dia-a-dia precisamos executar alguns comandos atrav\xe9s de terminais. Abaixo uma listagem com os principais para quem esta estudando React Native.","date":"2022-06-16T00:00:00.000Z","formattedDate":"June 16, 2022","tags":[{"label":"comandos","permalink":"/blog/tags/comandos"},{"label":"mobile","permalink":"/blog/tags/mobile"},{"label":"react","permalink":"/blog/tags/react"},{"label":"terminal","permalink":"/blog/tags/terminal"},{"label":"powershell","permalink":"/blog/tags/powershell"}],"readingTime":0.975,"truncated":true,"authors":[{"name":"William Honorio","title":"Desenvolvedor em aprendizado","url":"https://github.com/williamhmw","imageURL":"https://raw.githubusercontent.com/williamhmw/williamhmw.github.io/main/blog/william.jpg","key":"william"}],"frontMatter":{"slug":"comandos-em-terminais","title":"Comandos em terminais","authors":"william","tags":["comandos","mobile","react","terminal","powershell"]},"prevItem":{"title":"O b\xe1sico do React Native","permalink":"/blog/o-basico-do-react-native"},"nextItem":{"title":"Primeiro post","permalink":"/blog/primeiro-post"}},"content":"Para executar algumas a\xe7\xf5es no dia-a-dia precisamos executar alguns comandos atrav\xe9s de terminais. Abaixo uma listagem com os principais para quem esta estudando React Native.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n:::info\\r\\n\\r\\nEsses comandos s\xe3o para executar um app em um emulador android, depois de seguir todo um processo de instala\xe7\xe3o e configura\xe7\xe3o.\\r\\n\\r\\n:::\\r\\n\\r\\nExecutar o `Metro` para emular o app no emulador:\\r\\n```git showLineNumbers title=\\"Iniciar Metro\\"\\r\\nnpm start\\r\\n```\\r\\n\\r\\nEm seguida executar o comando para iniciar o emulador do android:\\r\\n```git showLineNumbers title=\\"Iniciar Emulador Android\\"\\r\\nyarn android\\r\\n```\\r\\n\\r\\n\\r\\n:::info\\r\\n\\r\\nEsses comandos s\xe3o para executar o Docosaurus, plataforma de documena\xe7\xe3o e blog.\\r\\n\\r\\n:::\\r\\n\\r\\nExecutar o `Build` para gerar os arquivos est\xe1ticos que v\xe3o para o GitHub Pages\\r\\n```git showLineNumbers title=\\"Iniciar build\\"\\r\\nnpm run build\\r\\n```\\r\\n\\r\\nExecutar o `Serve` para iniciar no servidor local localhost.\\r\\n```git showLineNumbers title=\\"Iniciar servidor local\\"\\r\\nnpm run build\\r\\n```\\r\\n\\r\\nExecutar o `GIT_USER` para iniciar o deploy no GitHub Pages.\\r\\n```git showLineNumbers title=\\"Iniciar deploy\\"\\r\\nGIT_USER=<GITHUB_USERNAME> yarn deploy\\r\\n```\\r\\n\\r\\nNo caso trocar o `<GITHUB_USERNAME>` pelo nome configurado no terminal.\\r\\n\\r\\nSe for executar pelo terminal do PowerShell deve ser inserido o c\xf3digo abaixo.\\r\\n\\r\\n```git showLineNumbers title=\\"Iniciar deploy pelo Poweshell\\"\\r\\ncmd /C \'set \\"GIT_USER=<GITHUB_USERNAME>\\" && yarn deploy\'\\r\\n```\\r\\n\\r\\n\\r\\n**Bora codar!!!**"},{"id":"primeiro-post","metadata":{"permalink":"/blog/primeiro-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-15-first-post.md","source":"@site/blog/2022-06-15-first-post.md","title":"Primeiro post","description":"Criei esse blog para compartilhar meu aprendizado durante minha fase de estudos, inicialmente em react e mobile.","date":"2022-06-15T00:00:00.000Z","formattedDate":"June 15, 2022","tags":[{"label":"estudos","permalink":"/blog/tags/estudos"},{"label":"mobile","permalink":"/blog/tags/mobile"},{"label":"react","permalink":"/blog/tags/react"}],"readingTime":0.185,"truncated":true,"authors":[{"name":"William Honorio","title":"Desenvolvedor em aprendizado","url":"https://github.com/williamhmw","imageURL":"https://raw.githubusercontent.com/williamhmw/williamhmw.github.io/main/blog/william.jpg","key":"william"}],"frontMatter":{"slug":"primeiro-post","title":"Primeiro post","authors":"william","tags":["estudos","mobile","react"]},"prevItem":{"title":"Comandos em terminais","permalink":"/blog/comandos-em-terminais"}},"content":"Criei esse blog para compartilhar meu aprendizado durante minha fase de estudos, inicialmente em `react` e `mobile`.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nRegular blog authors can be added to `authors.yml`.\\r\\n\\r\\nOs dois princpais ilares ser\xe3o:\\r\\n\\r\\n- `Dicas`\\r\\n- `Resumos`\\r\\n\\r\\n**Bora codar!!!**"}]}')}}]);